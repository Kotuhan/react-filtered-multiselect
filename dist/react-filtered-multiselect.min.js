/**
 * react-filtered-multiselect 0.3.0 - https://github.com/insin/react-filtered-multiselect
 * MIT Licensed
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.FilteredMultiSelect=e()}}(function(){return function e(t,s,i){function n(l,r){if(!s[l]){if(!t[l]){var p="function"==typeof require&&require;if(!r&&p)return p(l,!0);if(o)return o(l,!0);var a=new Error("Cannot find module '"+l+"'");throw a.code="MODULE_NOT_FOUND",a}var d=s[l]={exports:{}};t[l][0].call(d.exports,function(e){var s=t[l][1][e];return n(s?s:e)},d,d.exports,e,t,s,i)}return s[l].exports}for(var o="function"==typeof require&&require,l=0;l<i.length;l++)n(i[l]);return n}({1:[function(e,t){"use strict";function s(e,t){for(var s={},i=0,n=e.length;n>i;i++)t?s[e[i][t]]=!0:s[e[i]]=!0;return s}function i(e,t,i){for(var n=[],o=0,l=s(i),r=0,p=e.length,a=i.length;p>r&&a>o;r++)l[e[r][t]]&&(n.push(e[r]),o++);return n}var n="undefined"!=typeof window?window.React:"undefined"!=typeof global?global.React:null,o=n.createClass({displayName:"FilteredMultiSelect",propTypes:{buttonText:n.PropTypes.string,className:n.PropTypes.string,classNames:n.PropTypes.object,defaultFilter:n.PropTypes.string,disabled:n.PropTypes.bool,onChange:n.PropTypes.func.isRequired,options:n.PropTypes.array.isRequired,placeholder:n.PropTypes.string,selectedOptions:n.PropTypes.array,size:n.PropTypes.number,textProp:n.PropTypes.string,valueProp:n.PropTypes.string},getDefaultProps:function(){return{buttonText:"Select",className:"FilteredMultiSelect",classNames:{button:"FilteredMultiSelect__button",filter:"FilteredMultiSelect__filter",select:"FilteredMultiSelect__select"},defaultFilter:"",disabled:!1,placeholder:"type to filter",size:6,selectedOptions:[],textProp:"text",valueProp:"value"}},getInitialState:function(){var e=this.props,t=e.defaultFilter,s=e.selectedOptions;return{filter:t,filteredOptions:this._filterOptions(t,s),selectedValues:[]}},componentWillReceiveProps:function(e){(e.options!==this.props.options||e.selectedOptions!==this.props.selectedOptions||e.options.length!=this.props.options.length||e.selectedOptions.length!=this.props.selectedOptions.length)&&this.setState({filteredOptions:this._filterOptions(this.state.filter,e.selectedOptions,e.options)},this._updateSelectedValues)},_filterOptions:function(e,t,i){"undefined"==typeof e&&(e=this.state.filter),"undefined"==typeof t&&(t=this.props.selectedOptions),"undefined"==typeof i&&(i=this.props.options),e=e.toUpperCase();for(var n=this.props,o=n.textProp,l=n.valueProp,r=s(t,l),p=[],a=0,d=i.length;d>a;a++)r[i[a][l]]||e&&-1==i[a][o].toUpperCase().indexOf(e)||p.push(i[a]);return p},_onFilterChange:function(e){var t=e.target.value;this.setState({filter:t,filteredOptions:this._filterOptions(t)},this._updateSelectedValues)},_onFilterKeyPress:function(e){if("Enter"==e.key&&(e.preventDefault(),1==this.state.filteredOptions.length)){var t=this.state.filteredOptions[0],s=this.props.selectedOptions.concat([t]);this.setState({filter:"",selectedValues:[]},function(){this.props.onChange(s)}.bind(this))}},_updateSelectedValues:function(e){for(var t=e?e.target:this.refs.select.getDOMNode(),s=[],i=0,n=t.options.length;n>i;i++)t.options[i].selected&&s.push(t.options[i].value);(e||String(this.state.selectedValues)!=String(s))&&this.setState({selectedValues:s})},_addSelectedToSelection:function(){var e=this.props.selectedOptions.concat(i(this.state.filteredOptions,this.props.valueProp,this.state.selectedValues));this.setState({selectedValues:[]},function(){this.props.onChange(e)}.bind(this))},render:function(){var e=this,t=e.props,s=e.state;return n.createElement("div",{className:t.className},n.createElement("input",{type:"text",className:t.classNames.filter,placeholder:t.placeholder,value:s.filter,onChange:this._onFilterChange,onKeyPress:this._onFilterKeyPress,disabled:t.disabled}),n.createElement("select",{multiple:!0,ref:"select",className:t.classNames.select,size:t.size,value:s.selectedValues,onChange:this._updateSelectedValues,onDoubleClick:this._addSelectedToSelection,disabled:t.disabled},this.state.filteredOptions.map(function(e){return n.createElement("option",{key:e[t.valueProp],value:e[t.valueProp]},e[t.textProp])})),n.createElement("button",{type:"button",className:t.classNames.button,disabled:0===s.selectedValues.length,onClick:this._addSelectedToSelection},this.props.buttonText))}});t.exports=o},{}]},{},[1])(1)});